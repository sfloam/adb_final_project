import java.util.ArrayList;
import java.util.HashMap;


/**
 * 
 * @author pratikkarnik and scottfloam
 * 
 * <h1> Data Manager</h1>
 * The DataManager class creates 10 sites for data replication. It also generates 20 variables
 * replicates those variables across individual or multiple sites depending on the variable
 * id. Variables with even variable ids are replicated across all sites. Variables with odd 
 * variable ids are replicated across sites with the site id (1 + (varID % 10)). The initialization
 * of sites with variables is conducted in the Site class during the Site's instantiation.
 * 
 */
public class DataManager {
	
	/**
	 * vars is used to hold a key value pair between varIDs and Variables
	 * Potential Purposes:
	 * <ul>
	 * 		<li>Replication</li>
	 * 		<ul>
	 * 			<li>It is used to reference which sites are associated with a particular variable.</li>
	 * 			<li>By iterating over a Variable's site locations, one can quickly identify which sites to visit to update a copy of data</li>
	 *		</ul>
	 *		<li>MultiVersion Read Consistency</li>
	 *		<ul>
	 *			<li>During replicate, we do not update the value of a Variable in vars.</li>
	 *			<li>We do update the value of a Variable in vars when the transaction ends and has not been aborted (signaling that it has committed)</li>
	 *			<li>This also allows us to revert back changes when conflicts occur. Suppose T1 gets x1, then t2 gets x2 and then T1 needs x2 and T2 needs x1, we could abort T2, and use vars to revert back the value of T1's x2 to its original value using vars since T2 never commits.</li>
	 *		</ul>
	 * 		 
	 *  
	 */
	private HashMap<Integer, Variable> vars;
	private ArrayList<Site> sites;

	public DataManager() {
		this.vars = new HashMap<Integer, Variable>();
		this.sites = new ArrayList<Site>();

		for (int x = 1; x < 21; x++) {
			vars.put(x, new Variable(x));
		}

		this.sites.add(null); // leaves site0 empty will make it easier later
		for (int x = 1; x < 11; x++) {
			sites.add(new Site(x));
		}
	}

	public HashMap<Integer, Variable> getVars() {
		return this.vars;
	}

	public ArrayList<Site> getSites() {
		return this.sites;
	}

	// go into every site (associated with variable's sites) and update the variable
	// may need to address scenario if the site is failed
	// should not address lock checking because that should be done before this
	// method is invoked in TM
	public void replicate(int varID, int value) {
		for (Integer siteID : this.vars.get(varID).getSiteLocations()) {
			this.sites.get(siteID).getLT().updateVar(varID, value);
		}
		//uncommenting this will set vars to updated value. if we keep this
		//stale, we could use this for MultiVersionReadConsistency
		//can then update this at commit time?
		//this.vars.get(varID).setValue(value);
	}

	// TODO: maybe check if the site is available
	public Integer read(int siteID, int varID) {
		return this.sites.get(siteID).getLT().get(varID).getValue();
	}
	
	public String toString() {
		return " vars:" + vars;
	}

}
