
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashSet;

/**
 * 
 * @author scottfloam and pratikkarnik
 * 
 *         <h1>Transaction</h1> The Transaction keeps track of the transaction
 *         details. It holds information such as whether it is blocked, how long
 *         it has been running, the id of the transaction, and the variables 
 *         corresponding to that Transaction. In addition, it also keeps a log of 
 *         its operations in the operations queue. We need to think about if
 *         we want this to be a stack instead. It may make more sense to
 *         pop out most recent transactions to revert actions. TBD.
 *
 */
public class Transaction {
	private int age;
	private String transName;
	private int id;
	private HashSet<Integer> correspondingVars;
	private boolean blocked;


	// used for rollbacks
	public Queue<ArrayList<String>> operations;

	public Transaction(int id) {
		this.age = 0;
		this.transName = "T" + id;
		this.id = id;
		this.operations = new LinkedList<ArrayList<String>>();
		this.correspondingVars = new HashSet<Integer>();
		this.blocked = false;
	}

	/**
	 * compareTo would be necessary if you needed to sort transactions in some
	 * manner. May not be necessary. Could be possibily used for age sorting?
	 * 
	 * @param other_transaction
	 * @return
	 */
	public int compareTo(Transaction other_transaction) {
		int res = this.id - other_transaction.id;
		System.out.println(this + " compared to " + other_transaction);
		return res;
	}
	
	/**
	 * gets id of the transaction
	 * 
	 * @return
	 */
	public int getID() {
		return this.id;
	}

	/**
	 * gets age of the transaction
	 * age is simply the initial order in which it was inserted into the running queue
	 * 
	 * @return
	 */
	public Integer getAge() {
		return this.age;
	}

	/**
	 * setAge should only be done once when transaction is initiliazed
	 * @param age
	 */
	public void setAge(int age) {
		this.age = age;
	}

	/**
	 * getTransName() Gets the name of a transaction such as T1
	 * 
	 * @return
	 */
	public String getTransName() {
		return this.transName;
	}

	/**
	 * toString() prints out the Transaction in string form (i.e. T1)
	 */
	public String toString() {
		return "T" + this.id;
	}

	/**
	 * getCorrespondingVars keeps a HashSet of all Variable IDs used by this Transaction used for 
	 * determining which Site(s) need to be updated at commit time. We then use these Variable IDs
	 * to find the Site(s) that have variables that we need to update. We could also use this as a 
	 * means to determine next available free site quickly.
	 * @return
	 */
	public HashSet<Integer> getCorrespondingVars() {
		return this.correspondingVars;
	}
	
	/**
	 * addToCorrespondingVars adds a corresponding varaible id to the list of correspondingVariables associated with a given transaction
	 * @param varID
	 */
	public void addToCorrespondingVars(int varID) {
		this.correspondingVars.add(varID);
	}
	
	/**
	 * setBlocked simply toggles the blocked boolean on and off (blocked is initialized to false)
	 * 
	 */
	public void setBlocked() {
		this.blocked = !this.blocked;
	}
	/**
	 * isBlocked returns if Transaction is blocked by another Transaction
	 * @return boolean
	 *  
	 */
	public boolean isBlocked() {
		return this.blocked;
	}

}