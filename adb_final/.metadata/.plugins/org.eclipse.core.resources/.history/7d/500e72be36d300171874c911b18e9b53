
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashSet;

/**
 * 
 * @author scottfloam and pratikkarnik
 * 
 *         <h1>Transaction</h1> The Transaction keeps track of the transaction
 *         details. It holds information such as whether it is locked, how long
 *         it has been running, if there is a read or write lock on it, the id
 *         of the transaction, and the variables corresponding to that
 *         transaction. In addition, it also keeps a log of its operations in
 *         the operations queue. We need to think about if we want this to be a
 *         stack instead. It may make more sense to pop out most recent
 *         transactions to revert actions. TBD.
 *
 */
public class Transaction {
	private int age;
	private String transName;
	private int id;
	private boolean readLock;
	private boolean writeLock;
	private HashSet<Integer> correspondingVars;

	// used for rollbacks
	public Queue<ArrayList<String>> operations;

	public Transaction(int id) {
		this.age = 0;
		this.transName = "T" + id;
		this.id = id;
		readLock = false;
		writeLock = false;
		this.operations = new LinkedList<ArrayList<String>>();
		this.correspondingVars = new HashSet<Integer>();
	}

	/**
	 * compareTo would be necessary if you needed to sort transactions in some manner. May not be necessary.
	 * Could be possibily used for age sorting?
	 * @param other_transaction
	 * @return
	 */
	public int compareTo(Transaction other_transaction) {
		int res = this.id - other_transaction.id;
		System.out.println(this + " compared to " + other_transaction);
		return res;
	}



	public boolean getWriteLock() {
		return this.writeLock;
	}

	public boolean getReadLock() {
		return this.readLock;
	}

	public int getID() {
		return this.id;
	}

	public Integer getAge() {
		return this.age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getTransName() {
		return this.transName;
	}

	public String toString() {
		return "T" + this.id;
	}

	public HashSet<Integer> getCorrespondingVars() {
		return this.correspondingVars;
	}

	public void addVar(int varID) {
		this.correspondingVars.add(varID);
	}

}